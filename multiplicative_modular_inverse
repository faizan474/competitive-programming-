// for 1 to n modular inverse 

ll INV[1005];
void MI() 
{     ll n=1005;
INV[0] = INV[1] = 1; 
    for (ll i = 2; i <= 1004; i++)  
        INV[i] = INV[mod % i]*(mod - mod / i) % mod;     

}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// space O(1) time O(min(r,n-r)) without modular inverse 

long long int ncr(int n, int r){
  
       if(n-r<r){
           r=n-r;
       }
        long long int res=1;
        for(int i=0;i<r;i++){
           res*=(n-i);
            res/=(i+1);
        }
        return res;
    }
    
 ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

long modPow(long a, long x, long p) {
    //calculates a^x mod p in logarithmic time.
    long res = 1;
    while(x > 0) {
        if( x % 2 != 0) {
            res = (res * a) % p;
        }
        a = (a * a) % p;
        x /= 2;
    }
    return res;
}
long modInverse(long a, long p) {
    //calculates the modular multiplicative of a mod m.
    //(assuming p is prime).
    return modPow(a, p-2, p);
}
long ncr(long n, long k, long p) {
// calculates C(n,k) mod p (assuming p is prime).
 
    long numerator = 1; // n * (n-1) * ... * (n-k+1)
    for (int i=0; i<k; i++) {
        numerator = (numerator * (n-i) ) % p;
    }
 
    long denominator = 1; // k!
    for (int i=1; i<=k; i++) {
        denominator = (denominator * i) % p;
    }
 
    // numerator / denominator mod p.
    return ( numerator* modInverse(denominator,p) ) % p;
}
